{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAC,eAAe,EAAE,aAAa,EAAE,aAAa,EAAC,MAAM,OAAO,CAAC;AAEpE,OAAO,wBAAwB,MAAM,6EAA6E,CAAC;AAEnH,OAAO,eAAe,MAAM,sBAAsB,CAAC;AAEnD,MAAM,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;AACnC,MAAM,aAAa,GAAG;IACpB,WAAW,EAAE,IAAI;IACjB,qBAAqB,EAAE,GAAG;CAC3B,CAAC;AAEF,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,eAAe;IACzD;;;;OAIG;IACH,YAAY,QAAQ,EAAE,MAAM,GAAG,EAAE;QAC/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,qBAAO,aAAa,EAAK,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpE,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,GAAG;QACZ,MAAM,OAAO,GAAG,MAAM,IAAI,OAAO,CAC7B,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;QACvE,OAAO,CAAC,QAAQ,GAAG,aAAa,CAAC;QACjC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,qBAAqB,CAAC,IAAI;QACxB,MAAM,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;QAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;;;OASG;IACH,wBAAwB,CAAC,OAAO,EAAE,IAAI;QACpC,MAAM,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChE,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,oBAAoB,CAAC,GAAG;QAC5B,IAAI,QAAQ,EAAE,OAAO,CAAC;QACtB,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChC,OAAO,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YACxD,OAAO,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC;SAC5B;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,EAAE,CAAC;aACpB;YACD,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,OAAO,EAAE,CAAC;aACnB;YACD,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QACpD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher, GammaEncoding, TextureLoader} from 'three';\n\nimport EquirectangularToCubemap from '../third_party/three.equirectangular-to-cubemap/EquirectangularToCubemap.js';\n\nimport EnvMapGenerator from './EnvMapGenerator.js';\n\nconst loader = new TextureLoader();\nconst defaultConfig = {\n  cubemapSize: 1024,\n  synthesizedEnvmapSize: 512,\n};\n\nexport default class TextureManager extends EventDispatcher {\n  /**\n   * @param {THREE.WebGLRenderer} renderer\n   * @param {?number} config.cubemapSize [1024]\n   * @param {?number} config.synthesizedEnvmapSize [512]\n   */\n  constructor(renderer, config = {}) {\n    super();\n    this.config = {...defaultConfig, ...config};\n    this.renderer = renderer;\n    this.cubemapGenerator = new EquirectangularToCubemap(this.renderer);\n    this.envMapGenerator = new EnvMapGenerator(this.renderer);\n  }\n\n  /**\n   * @param {string} url\n   * @return {Promise<THREE.Texture>}\n   */\n  async load(url) {\n    const texture = await new Promise(\n        (resolve, reject) => loader.load(url, resolve, undefined, reject));\n    texture.encoding = GammaEncoding;\n    return texture;\n  }\n\n  /**\n   * @param {?number} size\n   * @return {THREE.Texture}\n   */\n  generateDefaultEnvMap(size) {\n    const mapSize = size || this.config.synthesizedEnvmapSize;\n    return this.envMapGenerator.generate(mapSize);\n  }\n\n  /**\n   * The texture returned here is from a WebGLRenderCubeTarget,\n   * which is not the same as a THREE.CubeTexture, and just what\n   * the current THREE.CubeCamera uses, and has the same effect\n   * when being used as an environment map.\n   *\n   * @param {THREE.Texture} texture\n   * @param {?number} size\n   * @return {THREE.Texture}\n   */\n  equirectangularToCubemap(texture, size) {\n    const mapSize = size || this.config.cubemapSize;\n    const cubemap = this.cubemapGenerator.convert(texture, mapSize);\n    return cubemap;\n  }\n\n  /**\n   * Returns a { equirect, cubemap } object with the textures\n   * accordingly, or null if cannot generate a texture from\n   * the URL.\n   *\n   * @see equirectangularToCubemap with regard to the THREE types.\n   * @param {string} url\n   * @return {Promise<Object|null>}\n   */\n  async toCubemapAndEquirect(url) {\n    let equirect, cubemap;\n    try {\n      equirect = await this.load(url);\n      cubemap = await this.equirectangularToCubemap(equirect);\n      return {equirect, cubemap};\n    } catch (e) {\n      if (equirect) {\n        equirect.dispose();\n      }\n      if (cubemap) {\n        cubemap.dispose();\n      }\n      return null;\n    }\n  }\n\n  dispose() {\n    this.cubemapGenerator.camera.renderTarget.dispose();\n    this.envMapGenerator.camera.renderTarget.dispose();\n    this.cubemapGenerator = null;\n    this.envMapGenerator = null;\n  }\n}\n"]}