{"version":3,"file":"model-viewer-base.js","sourceRoot":"","sources":["../src/model-viewer-base.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {UpdatingElement} from '@polymer/lit-element/lib/updating-element';\n\nimport {makeTemplate} from './template.js';\nimport ModelScene from './three-components/ModelScene.js';\nimport Renderer from './three-components/Renderer.js';\nimport {deserializeUrl} from './utils.js';\n\nconst renderer = new Renderer();\n\nconst $updateSize = Symbol('updateSize');\nconst $loaded = Symbol('loaded');\nconst $template = Symbol('template');\n\nexport const $updateSource = Symbol('updateSource');\nexport const $markLoaded = Symbol('markLoaded');\nexport const $container = Symbol('container');\nexport const $canvas = Symbol('canvas');\nexport const $scene = Symbol('scene');\nexport const $needsRender = Symbol('needsRender');\nexport const $tick = Symbol('tick');\nexport const $onModelLoad = Symbol('onModelLoad');\nexport const $onResize = Symbol('onResize');\nexport const $renderer = Symbol('renderer');\n\n/**\n * Definition for a basic <model-viewer> element.\n *\n */\nexport default class ModelViewerElementBase extends UpdatingElement {\n  static get properties() {\n    return {src: {type: deserializeUrl}};\n  }\n\n  static get is() {\n    return 'model-viewer';\n  }\n\n  static get template() {\n    if (!this.hasOwnProperty($template)) {\n      this[$template] = makeTemplate(this.is);\n    }\n\n    return this[$template];\n  }\n\n  get loaded() {\n    return this[$loaded];\n  }\n\n  get[$renderer]() {\n    return renderer;\n  }\n\n  /**\n   * Creates a new ModelViewerElement.\n   */\n  constructor() {\n    super();\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleElement(this);\n    }\n\n    const {shadowRoot} = this;\n    const template = this.constructor.template;\n\n    shadowRoot.appendChild(template.content.cloneNode(true));\n\n    this[$container] = shadowRoot.querySelector('.container');\n    this[$canvas] = shadowRoot.querySelector('canvas');\n\n    // Create the underlying ModelScene.\n    const {width, height} = this.getBoundingClientRect();\n    this[$scene] = new ModelScene(\n        {canvas: this[$canvas], element: this, width, height, renderer});\n\n    this[$loaded] = false;\n\n    this[$scene].addEventListener('model-load', () => {\n      this[$markLoaded]();\n      this[$onModelLoad]();\n\n      this.dispatchEvent(new CustomEvent('load'));\n    });\n\n    // Update initial size on microtask timing so that subclasses have a chance\n    // to initialize\n    Promise.resolve().then(() => {\n      this[$updateSize](this.getBoundingClientRect(), true);\n    });\n\n    // Set a resize observer so we can scale our canvas\n    // if our <model-viewer> changes\n    this.resizeObserver = new ResizeObserver(entries => {\n      // Don't resize anything if in AR mode; otherwise the canvas\n      // scaling to fullscreen on entering AR will clobber the flat/2d\n      // dimensions of the element.\n      if (renderer.isPresenting) {\n        return;\n      }\n      for (let entry of entries) {\n        if (entry.target === this) {\n          this[$updateSize](entry.contentRect);\n        }\n      }\n    });\n    this.resizeObserver.observe(this);\n\n    this.intersectionObserver = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (entry.target === this) {\n          this[$scene].isVisible = entry.isIntersecting;\n        }\n      }\n    }, {\n      root: null,\n      rootMargin: '10px',\n      threshold: 0,\n    });\n    this.intersectionObserver.observe(this);\n  }\n\n  connectedCallback() {\n    this[$renderer].registerScene(this[$scene]);\n    this[$scene].isDirty = true;\n  }\n\n  disconnectedCallback() {\n    this[$renderer].unregisterScene(this[$scene]);\n  }\n\n  update(changedProperties) {\n    this[$updateSource]();\n  }\n\n  /**\n   * Called on initialization and when the resize observer fires.\n   */\n  [$updateSize]({width, height}, forceApply) {\n    const {width: prevWidth, height: prevHeight} = this[$scene].getSize();\n    // Round off the pixel size\n    width = parseInt(width, 10);\n    height = parseInt(height, 10);\n\n    if (forceApply || (prevWidth !== width || prevHeight !== height)) {\n      this[$container].style.width = `${width}px`;\n      this[$container].style.height = `${height}px`;\n      this[$onResize]({width, height});\n    }\n  }\n\n  [$tick](time, delta) {\n  }\n\n  [$markLoaded]() {\n    this[$loaded] = true;\n    // Asynchronously invoke `update`:\n    this.requestUpdate();\n  }\n\n  [$needsRender]() {\n    this[$scene].isDirty = true;\n  }\n\n  [$onModelLoad](e) {\n    this[$needsRender]();\n  }\n\n  [$onResize](e) {\n    this[$scene].setSize(e.width, e.height);\n    this[$needsRender]();\n  }\n\n  /**\n   * Parses the element for an appropriate source URL and\n   * sets the views to use the new model based off of the `preload`\n   * attribute.\n   */\n  [$updateSource]() {\n    const source = this.src;\n\n    if (!source) {\n      return;\n    }\n\n    this[$canvas].classList.add('show');\n    this[$scene].setModelSource(source);\n  }\n}\n"]}