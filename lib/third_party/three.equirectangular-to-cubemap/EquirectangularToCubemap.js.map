{"version":3,"file":"EquirectangularToCubemap.js","sourceRoot":"","sources":["../../../src/third_party/three.equirectangular-to-cubemap/EquirectangularToCubemap.js"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,CAAC,OAAO,UAAU,wBAAwB,CAAC,QAAQ;IACvD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACzB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;IAE/B,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IACpC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAA;IAEzC,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAEpE,IAAI,CAAC,QAAQ;QACT,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAC,CAAC,CAAC;IAEnE,IAAI,CAAC,IAAI;QACL,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED,wBAAwB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,MAAM,EAAE,IAAI;IAChE,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACvD,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC;IAE3B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAErD,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;AAC1C,CAAC,CAAA","sourcesContent":["import * as THREE from 'three';\n\nexport default function EquirectangularToCubemap(renderer) {\n  this.renderer = renderer;\n  this.scene = new THREE.Scene();\n\n  var gl = this.renderer.getContext();\n  this.maxSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)\n\n                     this.camera = new THREE.CubeCamera(1, 100000, 1);\n\n  this.material =\n      new THREE.MeshBasicMaterial({map: null, side: THREE.BackSide});\n\n  this.mesh =\n      new THREE.Mesh(new THREE.IcosahedronGeometry(100, 4), this.material);\n  this.scene.add(this.mesh);\n}\n\nEquirectangularToCubemap.prototype.convert = function(source, size) {\n  var mapSize = Math.min(size, this.maxSize);\n  this.camera = new THREE.CubeCamera(1, 100000, mapSize);\n  this.material.map = source;\n\n  this.camera.updateCubeMap(this.renderer, this.scene);\n\n  return this.camera.renderTarget.texture;\n}\n"]}